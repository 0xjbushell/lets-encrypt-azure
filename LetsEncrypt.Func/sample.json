{
    "acme": {
        // letsencrypt account. will receive emails from LetsEncrypt if renewal failed (1-2 weeks before expiry)
        "email": "you@example.com",
        // default for all certificates in this file
        // letsencrypt certs are valid 90 days -> renewal is checked daily and occurs 30 days before expiry in this case
        // defaults to 30 days
        "renewXDaysBeforeExpiry": 30,
        // if true, will use the LetsEncrypt staging environment (not actually issuing a real certificate)
        // if false will use the prod environment. note that prod has rate-limits https://letsencrypt.org/docs/rate-limits/
        "staging": false
    },
    // list of certificates to issue
    // create one file per domain or per project or put it all in a single config - up to you!
    "certificates": [
        {
            // a single cert with all these hostnames will be issued
            "hostNames": [
                "example.com",
                "www.example.com"
            ],
            // how to verify the LetsEncrypt challenge
            // defaults to assume MSI access to $wev container
            "challengeResponder": {
                "type": "storageAccount",
              "properties": {
                // assumes static website is enabled on the storage account by default
                "container": "$web",
                // assumes standard letsencrypt folder
                "path": ".well-known/acme-challenge/",

                // supports 3 modes of authentication: MSI, connection string and connection string in keyvault

                // 1. MSI (preferred)
                // for MSI you must grant the function MSI "Storage Blob Data Contributor" on the $web container (in the Azure Portal IAM section of the storage container), the function MSI has the same name as your function resource
                // if MSI is used, the accountName of the storage is needed.
                // if accountName not set, assumes same name as keyvault in certificateStore section
                // note that "-" is automatically removed, e.g. keyvault "my-app" -> assumes storage "myapp"
                "accountName": "example",

                // 2. connection string (least secure)
                // just set the full connection string in the config:
                "connectionString": "",

                // 3. connection string in keyvault:
                // (function app MSI must be granted Get,List secrets access policies to the keyvault):
                // if keyVaultName not set, assumes same keyvault as in certificateStore section
                "keyVaultName": "example",
                // must contain connection string to storage account
                // defaults to name "Storage" id not set
                "secretName": "Storage"
              }
            },
            "certificateStore": {
                // only supports keyvault for now
                "type": "keyVault",
                "properties": {
                    // where to store the certificate upon creation
                    // uses name of targetResource if not set
                    "name": "example",
                    // defaults to first hostname with replace(".", "-") due to keyvault limitation 
                    "certificateName": "example-com"
                }
            },
            // the resource which will receive the certificate update
            "targetResource": {
                // only supports cdn right now
                "type": "cdn",
                // if all property names are the same, may also use shortcut "name": "cdn-name" next to type
                "properties": {
                    // required, name of the cdn
                    "name": "example",
                    // defaults to name of cdn if not set
                    "resourceGroupName": "example",
                    // will look for all matching domains in the given endpoint of the CDN
                    // if not set looks for a single endpoint with the same name as the CDN
                    "endpoints": [
                        "example"
                    ]
                }
            }
        },
        // identical to the one above due to fallbacks replacing not set values in fallbackchain
        // it will access storage account "example" for letsenecrypt challenge via MSI
        {
            "hostNames": [
                "example.com",
                "www.example.com"
            ],
            // since all resource(group)s are named identical ("example") the config becomes very short as everything can use fallbacks
            "targetResource": {
                "type": "cdn",
                // shortcut for setting all properties to same value
                "name": "example"
            }
        }
    ]
}
