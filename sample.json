{
    "acme": {
        // letsencrypt account. will receive emails from LetsEncrypt if renewal failed (1-2 weeks before expiry)
        "email": "you@example.com",
        // default for all certificates in this file
        // letsencrypt certs are valid 90 days -> renewal is checked daily and occurs 30 days before expiry in this case
        // defaults to 30 days
        "renewXDaysBeforeExpiry": 30,
        // if true, will use the LetsEncrypt staging environment (not actually issuing a real certificate)
        // if false will use the prod environment. note that prod has rate-limits https://letsencrypt.org/docs/rate-limits/
        "staging": false
    },
    // list of certificates to issue
    // create one file per domain or per project or put it all in a single config - up to you!
    "certificates": [
        {
            // a single cert with all these hostnames will be issued
            "hostNames": [
                "marcstan.net",
                "www.marcstan.net"
            ],
            // how to verify the LetsEncrypt challenge
            // defaults to assume static website via connectionString in keyvault secret
            "challengeResponder": {
                "type": "storageAccount",
                "properties": {
                    // assumes static website is enabled on the storage account by default
                    "container": "$web",
                    "path": ".well-known/acme-challenge/",
                    // auth: either directly connectionstring
                    "connectionString": "",
                    // or (a bit more secure) via keyvault (MSI must be granted Get,List secrets access to the keyvault):
                    // if keyVaultName not set, assumes same keyvault as in certificateStore section
                    "keyVaultName": "marcstan",
                    // must contain connection string to storage account
                    // defaults to name "Storage"
                    "secretName": "Storage"
                }
            },
            "certificateStore": {
                // only supports keyvault for now
                "type": "keyVault",
                "properties": {
                    // where to store the certificate upon creation
                    // uses name of targetResource if not set
                    "name": "marcstan",
                    // defaults to first hostname with replace(".", "-") due to keyvault limitation 
                    "certificateName": "marcstan-net"
                }
            },
            // the resource which will receive the certificate update
            "targetResource": {
                // only supports cdn right now
                "type": "cdn",
                // if all property names are the same, may also use shortcut "name": "" next to type
                "properties": {
                    // required, name of the cdn
                    "name": "marcstan",
                    // defaults to name of cdn if not set
                    "resourceGroupName": "marcstan",
                    // will look for all matching domains in the given endpoint of the CDN
                    // if not set looks for a single endpoint with the same name as the CDN
                    "endpoints": [
                        "marcstan"
                    ]
                }
            }
        },
        // identical to the one above due to fallbacks
        {
            "hostNames": [
                "marcstan.net",
                "www.marcstan.net"
            ],
            // since all resources are named marcstan the config becomes very short as everything can use fallbacks
            "targetResource": {
                "type": "cdn",
                // shortcut for setting all properties to same value
                "name": "marcstan"
            }
        },
        {
            // will store secret "storage-marcstan-net" in keyvault
            "hostNames": [
                "storage.marcstan.net"
            ],
            "targetResource": {
                "type": "cdn",
                "name": "marcstan"
            }
        }
    ]
}